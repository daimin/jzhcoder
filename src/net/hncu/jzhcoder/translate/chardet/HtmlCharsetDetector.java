/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 *
 * These codes from jchardet,we just modify a little.
 * 
 * jchardet is a java port of the source from mozilla's automatic charset detection algorithm. 
 * The original author is Frank Tang. What is available here is the java port of that code. 
 * The original source in C++ can be found from 
 * http://lxr.mozilla.org/mozilla/source/intl/chardet/ 
 * More information can be found at 
 * http://www.mozilla.org/projects/intl/chardet.html
 * All Rights Reserved. 
 * 
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * DO NOT EDIT THIS DOCUMENT MANUALLY !!!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE TOOLS UNDER
 *    AutoDetect/tools/
 */
package net.hncu.jzhcoder.translate.chardet;

import java.io.*;
import java.net.*;
import java.nio.charset.Charset;

import net.hncu.jzhcoder.translate.Charsets;

public class HtmlCharsetDetector {

    public static boolean found = false ;

    public static Charset probableCharset = null;
    public static void main(String argv[]) throws Exception {
    	System.out.println(detect("http://www.javaeye.com/"));
	} 
    
    public static Charset detect(String urlStr){
    	// Initalize the nsDetector() ;
    	int lang = nsPSMDetector.SIMPLIFIED_CHINESE;
    	nsDetector det = new nsDetector(lang) ;

    	// Set an observer...
    	// The Notify() will be called when a matching charset is found.

    	det.Init(new nsICharsetDetectionObserver() {
    		public void Notify(String charset) {
    		    HtmlCharsetDetector.found = true ;
// System.out.println("CHARSET = " + charset);
    		    probableCharset = Charsets.getSupportableCharset(charset);
    		}
        	});

    	URL url;
		try {
			url = new URL(urlStr);
		} catch (MalformedURLException e) {
			throw new RuntimeException(e);
		}
    	BufferedInputStream imp;
		try {
			imp = new BufferedInputStream(url.openStream());
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
    	
    	byte[] buf = new byte[1024] ;
    	int len;
    	boolean done = false ;
    	boolean isAscii = true ;
    	   
    	try {
			while( (len=imp.read(buf,0,buf.length)) != -1) {

				// Check if the stream is only ascii.
				if (isAscii)
				    isAscii = det.isAscii(buf,len);

				// DoIt if non-ascii and not done yet.
				if (!isAscii && !done)
				    done = det.DoIt(buf,len, false);
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
    	det.DataEnd();

    	if (isAscii) {
// System.out.println("CHARSET = ASCII");
    	   found = true ;
    	}

    	if (!found) {
    	   String prob[] = det.getProbableCharsets() ;
    	   for(int i=0; i<prob.length; i++) {
    		System.out.println("Probable Charset = " + prob[i]);
    	   }
    	   probableCharset = Charsets.getSupportableCharset(prob[0]);
    	}
    	return probableCharset;
    }
}
